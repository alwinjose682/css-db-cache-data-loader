package io.alw.css.refdataloader.dao;

import io.alw.css.domain.referencedata.*;
import io.alw.css.refdataloader.dao.model.PageRequest;
import io.alw.css.refdataloader.mapper.jpa.*;
import io.alw.css.refdataloader.model.DataLoadType;
import io.alw.css.refdataloader.model.jpa.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.hibernate.Session;

import java.util.List;

//TODO: https://github.com/open-telemetry/opentelemetry-java-instrumentation/discussions/12125
public class DataLoaderDao {
    @PersistenceContext
    private EntityManager entityManager;

    public boolean isDbDataAlreadyLoaded() {
        var alreadyLoaded = entityManager.createQuery("""
                        select 1
                        from DataLoadStatusEntity
                        where exists (select max(dls.id) from DataLoadStatusEntity dls where loadType = :loadType)""", Integer.class)
                .setParameter("loadType", DataLoadType.DB)
                .getResultList();
        return !alreadyLoaded.isEmpty();
    }

    public void save(Country country) {
        CountryEntity countryEntity = CountryEntityMapper.instance().domainToEntity(country);
        entityManager.persist(countryEntity);
    }

    public void save(Currency currency) {
        CurrencyEntity currencyEntity = CurrencyEntityMapper.instance().domainToEntity(currency);
        entityManager.persist(currencyEntity);
    }

    public void save(Entity entity, List<Nostro> nostros) {
        EntityEntity entityEntity = EntityEntityMapper.instance().domainToEntity(entity);
        List<NostroEntity> nostroEntityList = nostros.stream().map(n -> NostroEntityMapper.instance().domainToEntity(n)).toList();

        entityEntity.setNostros(nostroEntityList);
        entityManager.persist(entityEntity);
    }

    public void save(Counterparty counterparty, List<Ssi> ssis, List<CounterpartyNettingProfile> nettingProfiles, List<CounterpartySlaMapping> slaMappings) {
        CounterpartyEntity counterpartyEntity = CounterpartyEntityMapper.instance().domainToEntity(counterparty);
        List<SsiEntity> ssiEntityList = ssis.stream().map(ssi -> SsiEntityMapper.instance().domainToEntity(ssi)).toList();
        List<CounterpartyNettingProfileEntity> nettingProfileEntityList = nettingProfiles.stream().map(np -> CounterpartyNettingProfileEntityMapper.instance().domainToEntity(np)).toList();
        List<CounterpartySlaMappingEntity> slaMappingEntityList = slaMappings.stream().map(sm -> CounterpartySlaMappingEntityMapper.instance().domainToEntity(sm)).toList();

        counterpartyEntity.setSsiList(ssiEntityList);
        counterpartyEntity.setCpNettingProfiles(nettingProfileEntityList);
        counterpartyEntity.setSlaMappingEntities(slaMappingEntityList);
        entityManager.persist(counterpartyEntity);
    }

    public void save(DataLoadStatusEntity dls) {
        entityManager.persist(dls);
    }

    public List<CountryEntity> getAllCountry() {
        return entityManager.createQuery("select ctry from CountryEntity ctry where 1=1", CountryEntity.class).getResultList();
    }

    public List<CurrencyEntity> getAllCurrency() {
        return entityManager.createQuery("select ccy from CurrencyEntity ccy where 1=1", CurrencyEntity.class).getResultList();
    }

    public List<EntityEntity> getAllEntity() {
        return entityManager.createQuery("select ent from EntityEntity ent where 1=1", EntityEntity.class).getResultList();
    }

    public List<CounterpartyEntity> getAllCounterparty() {
        return entityManager.createQuery("select cpty from CounterpartyEntity cpty where 1=1", CounterpartyEntity.class).getResultList();
    }

    /// This code is only to see the sql query and the MultipleBagFetchException generated by hibernate
    /// Attempts to retrieve Counterparty and all its associations (Ssi, CPNettingProfile, CPSlaMapping) in a single sql query with a huge cartesian product
    /// This data retrieval DOES NOT result in N+1 issue, but the issue is huge data set due to huge cartesian product and fetching the huge data in a single transaction
    public List<CounterpartyEntity> getCounterpartyAndDependentData() {
        return entityManager
                .unwrap(Session.class)
                .createQuery("""
                        select cpty
                        from CounterpartyEntity cpty
                        left outer join fetch cpty.ssiList
                        left outer join fetch cpty.cpNettingProfiles
                        left outer join fetch cpty.slaMappingEntities
                        """, CounterpartyEntity.class)
                .getResultList();
    }

    public List<EntityEntity> getEntityPaged(PageRequest pageRequest) {
        return pagedDataAs(pageRequest, "select ent from EntityEntity ent where 1=1", EntityEntity.class);
    }

    public List<CounterpartyEntity> getCounterpartyPaged(PageRequest pageRequest) {
        return pagedDataAs(pageRequest, "select cp from CounterpartyEntity cp where 1=1", CounterpartyEntity.class);
    }

    public List<NostroEntity> getNostroPaged(PageRequest pageRequest) {
        return pagedDataAs(pageRequest, "select nstr from NostroEntity nstr where 1=1", NostroEntity.class);
    }

    public List<SsiEntity> getSsiPaged(PageRequest pageRequest) {
        return pagedDataAs(pageRequest, "select ssi from SsiEntity ssi where 1=1", SsiEntity.class);
    }

    public List<CounterpartyNettingProfileEntity> getCounterpartyNettingProfilePaged(PageRequest pageRequest) {
        return pagedDataAs(pageRequest, "select cpnp from CounterpartyNettingProfileEntity cpnp where 1=1", CounterpartyNettingProfileEntity.class);
    }

    public List<CounterpartySlaMappingEntity> getCounterpartySlaMappingPaged(PageRequest pageRequest) {
        return pagedDataAs(pageRequest, "select cpsm from CounterpartySlaMappingEntity cpsm where 1=1", CounterpartySlaMappingEntity.class);
    }

    /// Performs offset pagination
    private <R> List<R> pagedDataAs(PageRequest pageRequest, String query, Class<R> clazz) {
        return entityManager
                .unwrap(Session.class)
                .createQuery(query, clazz)
                .setFirstResult(pageRequest.pageNum()[0] * pageRequest.pageSize())
                .setMaxResults(pageRequest.pageSize())
                .getResultList();
    }
}
